/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   run_bti.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: juepark <juepark@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/04/16 13:20:23 by juepark           #+#    #+#             */
/*   Updated: 2021/04/16 13:20:24 by juepark          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../incs/minishell.h"

char	*get_bti_path(char *cand, char *cmd)
{
	DIR				*dir_name;
	struct dirent	*item;
	char			*ret;
	char			*tmp;

	ret = NULL;
	if(!(dir_name = opendir(cand)))
		return (NULL);
	while ((item = readdir(dir_name)))
	{
		if (!exact_strncmp(item->d_name, cmd))
		{
			ret = ft_strjoin(cand, "/");
			tmp = ret;
			ret = ft_strjoin(ret, item->d_name); 
			free(tmp);
			return (ret);
		}
	}
	closedir(dir_name);
	return (ret);
}


int			run_bti(t_tokens *tokens, t_list *env_list)
{
	char	*func_path;
	char	**cand_arr;
	int		idx;
	char	*bti_path;
	char	**env_arr;


	DIR				*dir_name;
	struct dirent	*item;
	char			*ret;
	char			*tmp;

	char *cand = "/bin/";

	ret = NULL;
	if(!(dir_name = opendir()))
		return (1);
	while ((item = readdir(dir_name)))
	{
		if (!exact_strncmp(item->d_name, tokens->cmd))
		{
			ret = ft_strjoin(cand, "/");
			tmp = ret;
			ret = ft_strjoin(ret, item->d_name); 
			free(tmp);
			return (ret);
		}
	}
	closedir(dir_name);
	return (ret);
	printf("tokens->cmd: %s\n", tokens->cmd);










	if(execve(tokens->cmd, tokens->tokens, env_arr) < 0)
		printf("FAILURE===========================\n");
	if (!(func_path = get_eval(env_list, "PATH")))
		return (1);
	cand_arr = pk_split(func_path, func_path, ':', INF);
	idx = -1;
	bti_path = NULL;
	while (cand_arr[++idx])
	{
		if ((bti_path = get_bti_path(cand_arr[idx], tokens->cmd)))
			break ;
	}
	printf("bti_path: %s\n", bti_path);
	free_darr(cand_arr, INF);
	if (!bti_path)
		return (1);
	env_arr = set_list_to_darr(env_list);
	if (execve(bti_path, tokens->tokens, env_arr) < 0)
		return (1);
	free(bti_path);
	free_darr(env_arr, INF);
	return (0);
}
